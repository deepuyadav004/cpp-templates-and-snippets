class LazySegmentTree {
    public:
    vector<ll>seg, lazy;

    LazySegmentTree(int n){
        seg.resize(4*n+5);
        lazy.resize(4*n+5);
    }

    void build(int node, int st, int en, vector<int>&v){
        if(st == en){
            seg[st] = v[st];
            return;
        }

        int mid = (st+en)/2;
        build(2*node, st, mid, v);
        build(2*node+1, mid+1, en, v);
        seg[node] = seg[2*node]+seg[2*node+1];
    }

    ll query(int node, int ss, int se, int qs, int qe){
        if(lazy[node] != 0){
            ll dx = lazy[node];
            lazy[node] = 0;
            seg[node] += dx*(se-ss+1);

            if(se != ss){
                lazy[2*node] += dx;
                lazy[2*node+1] += dx;
            }
        }

        if(qs > se || ss > qe){
            return 0;
        }
        if(qs<=ss && se<=qe){
            return seg[node];
        }

        int mid = (ss+se)/2;
        return query(2*node, ss, mid, qs, qe) + query(2*node+1, mid+1, se, qs, qe);
    }

    void update(int node, int ss, int se, int qs, int qe, ll val){
        if(lazy[node] != 0){
            ll dx = lazy[node];
            lazy[node] = 0;
            seg[node] += dx*(se-ss+1);

            if(se != ss){
                lazy[2*node] += dx;
                lazy[2*node+1] += dx;
            }
        }

        if(qs > se || ss > qe){
            return;
        }
        if(qs<=ss && se<=qe){
            seg[node] += val*(se-ss+1);
            
            if(ss != se){
                lazy[2*node] += val;
                lazy[2*node+1] += val;
            }
            return;
        }

        int mid = (ss+se)/2;
        update(2*node, ss, mid, qs, qe, val);
        update(2*node+1, mid+1, se, qs, qe, val);

        seg[node] = seg[2*node] + seg[2*node+1];
    }
};
